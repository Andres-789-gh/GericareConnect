<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Agregar Paciente - GeriCare Connect</title>
    
    <!-- Iconos de Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    
    <!-- Fuentes de Google -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600;700&display=swap" rel="stylesheet">

    <!-- Estilos CSS Integrados -->
    <style>
        /* --- Reset y Estilos Base --- */
        :root {
            --primary-color: #28a745; /* Verde principal */
            --primary-hover: #218838; /* Verde más oscuro para hover */
            --light-gray: #f4f7f6;
            --medium-gray: #e9ecef;
            --dark-gray: #6c757d;
            --text-color: #343a40;
            --white: #ffffff;
            --danger-bg: #f8d7da;
            --danger-text: #721c24;
            --danger-border: #f5c6cb;
            --success-bg: #d4edda;
            --success-text: #155724;
            --success-border: #c3e6cb;
            --shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: var(--light-gray);
            color: var(--text-color);
            line-height: 1.6;
        }

        /* --- Cabecera --- */
        .admin-header {
            background-color: var(--white);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow);
        }
        .logo-container {
            display: flex;
            align-items: center;
            cursor: pointer;
        }
        .logo {
            height: 50px;
            margin-right: 15px;
        }
        .app-name {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
        }
        .admin-header nav ul {
            list-style: none;
            display: flex;
            gap: 1.5rem;
        }
        .admin-header nav a {
            text-decoration: none;
            color: var(--dark-gray);
            font-weight: 500;
            transition: color 0.3s ease;
        }
        .admin-header nav a:hover,
        .admin-header nav a.active {
            color: var(--primary-color);
        }

        /* --- Contenido Principal y Formulario --- */
        .admin-content {
            padding: 2rem;
        }
        .agregar-paciente-container {
            max-width: 900px;
            margin: 0 auto;
            background: var(--white);
            padding: 2.5rem;
            border-radius: 12px;
            box-shadow: var(--shadow);
        }
        h1 {
            font-size: 1.8rem;
            font-weight: 600;
            color: var(--text-color);
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        /* --- Estilo de la Rejilla del Formulario --- */
        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr; /* Dos columnas */
            gap: 1.5rem 2rem; /* Espacio vertical y horizontal */
            margin-bottom: 2rem;
        }

        /* Responsive: una columna en pantallas pequeñas */
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
        }
        
        /* --- Estilo de los Campos del Formulario (Inputs, Selects) --- */
        .form-group {
            display: flex;
            flex-direction: column;
        }
        .form-group label {
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark-gray);
            font-size: 0.9rem;
        }
        .form-group label i {
            margin-right: 8px;
            color: var(--primary-color);
        }
        
        /* Estilo unificado para inputs de texto, número y fecha */
        input[type="text"],
        input[type="number"],
        input[type="date"],
        select {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid var(--medium-gray);
            border-radius: 8px;
            font-family: 'Poppins', sans-serif;
            font-size: 1rem;
            color: var(--text-color);
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
            appearance: none; /* Quita estilos nativos */
        }

        input:focus, select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.2);
        }
        
        /* --- ESTILO ESPECIAL PARA EL CAMPO DE FECHA --- */
        input[type="date"] {
            position: relative;
            background-color: var(--white);
            cursor: text;
        }
        /* Color del texto del placeholder (ej. dd/mm/aaaa) */
        input[type="date"]::-webkit-datetime-edit { 
            color: #757575; 
        }
        /* Estilo del ícono del calendario (para Chrome/Safari) */
        input[type="date"]::-webkit-calendar-picker-indicator {
            opacity: 0; /* Oculta el ícono original */
            cursor: pointer;
            position: absolute;
            right: 0;
            top: 0;
            width: 100%;
            height: 100%;
        }
        .form-group.date-group {
            position: relative;
        }
        .form-group.date-group::after {
            font-family: "Font Awesome 6 Free";
            font-weight: 900;
            content: "\f073"; /* Ícono de calendario de Font Awesome */
            color: var(--dark-gray);
            position: absolute;
            right: 15px;
            top: 42px; /* Ajuste vertical */
            pointer-events: none; /* Para que el clic llegue al input */
        }
        
        /* --- Estilo para el Select --- */
        .form-group.select-group {
            position: relative;
        }
        .form-group.select-group::after {
            font-family: "Font Awesome 6 Free";
            font-weight: 900;
            content: "\f078"; /* Ícono de flecha hacia abajo */
            color: var(--dark-gray);
            font-size: 0.8rem;
            position: absolute;
            right: 15px;
            top: 44px; /* Ajuste vertical */
            pointer-events: none;
        }

        /* --- Botón de Guardar --- */
        .submit-button {
            width: 100%;
            padding: 15px;
            background: linear-gradient(45deg, var(--primary-color), #24c251);
            color: var(--white);
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }
        .submit-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(40, 167, 69, 0.3);
        }
        .submit-button:disabled {
            background: var(--medium-gray);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* --- Contenedores de Feedback (Errores y Éxito) --- */
        #feedback-container { margin-bottom: 1.5rem; text-align: left; }
        .error-box, .success-box {
            padding: 15px;
            border-radius: 8px;
            font-size: 0.95rem;
        }
        .error-box {
            background-color: var(--danger-bg);
            color: var(--danger-text);
            border: 1px solid var(--danger-border);
        }
        .success-box {
            background-color: var(--success-bg);
            color: var(--success-text);
            border: 1px solid var(--success-border);
        }

    </style>
</head>
<body>
    <header class="admin-header">
        <div class="logo-container" onclick="window.location.href='admin_pacientes.html'">
            <img src="../../imagenes/Geri_Logo-..png" alt="Logo GeriCare Connect" class="logo">
            <span class="app-name">GERICARE CONNECT</span>
        </div>
        <nav>
            <ul>
                <li><a href="admin_pacientes.html"><i class="fas fa-user-injured"></i> Pacientes</a></li>
                <li><a href="admin_solicitudes.html"><i class="fas fa-envelope-open-text"></i> Solicitudes</a></li>
                <li><a href="../../../controllers/admin/logout.php"><i class="fas fa-sign-out-alt"></i> Cerrar Sesión</a></li>
            </ul>
        </nav>
    </header>

    <main class="admin-content">
        <div class="agregar-paciente-container">
            <h1><i class="fas fa-user-plus"></i> Agregar Nuevo Paciente</h1>

            <div id="feedback-container"></div>

            <form id="formulario-agregar-paciente" class="agregar-paciente-form" novalidate>
                <!-- Campos ocultos para IDs -->
                <input type="hidden" id="solicitud_origen_id" name="solicitud_origen_id">
                <input type="hidden" id="familiar_solicitante_id" name="familiar_solicitante_id">
                
                <div class="form-grid">
                    <!-- Columna 1 -->
                    <div>
                        <div class="form-group">
                            <label for="nombre"><i class="fas fa-user"></i> Nombres</label>
                            <input type="text" id="nombre" name="nombre" required>
                        </div>
                        <div class="form-group">
                            <label for="apellido"><i class="fas fa-user-friends"></i> Apellidos</label>
                            <input type="text" id="apellido" name="apellido" required>
                        </div>
                        <div class="form-group">
                            <label for="documento_identificacion"><i class="fas fa-id-card"></i> Número de Documento</label>
                            <input type="number" id="documento_identificacion" name="documento_identificacion" required>
                        </div>
                        <div class="form-group date-group">
                            <label for="fecha_nacimiento"><i class="fas fa-calendar-alt"></i> Fecha de Nacimiento</label>
                            <input type="date" id="fecha_nacimiento" name="fecha_nacimiento" required>
                        </div>
                         <div class="form-group select-group">
                            <label for="genero"><i class="fas fa-venus-mars"></i> Género</label>
                            <select id="genero" name="genero" required>
                                <option value="">Seleccione...</option>
                                <option value="Masculino">Masculino</option>
                                <option value="Femenino">Femenino</option>
                            </select>
                        </div>
                    </div>
                    <!-- Columna 2 -->
                    <div>
                        <div class="form-group">
                            <label for="contacto_emergencia"><i class="fas fa-phone-alt"></i> Contacto de Emergencia</label>
                            <input type="text" id="contacto_emergencia" name="contacto_emergencia">
                        </div>
                        <div class="form-group select-group">
                            <label for="estado_civil"><i class="fas fa-ring"></i> Estado Civil</label>
                             <select id="estado_civil" name="estado_civil" required>
                                <option value="">Seleccione...</option>
                                <option value="Soltero/a">Soltero/a</option>
                                <option value="Casado/a">Casado/a</option>
                                <option value="Viudo/a">Viudo/a</option>
                                <option value="Divorciado/a">Divorciado/a</option>
                                <option value="Unión Libre">Unión Libre</option>
                            </select>
                        </div>
                        <div class="form-group select-group">
                            <label for="tipo_sangre"><i class="fas fa-tint"></i> Tipo de Sangre</label>
                            <select id="tipo_sangre" name="tipo_sangre" required>
                                <option value="">Seleccione...</option>
                                <option value="A+">A+</option><option value="A-">A-</option>
                                <option value="B+">B+</option><option value="B-">B-</option>
                                <option value="AB+">AB+</option><option value="AB-">AB-</option>
                                <option value="O+">O+</option><option value="O-">O-</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="seguro_medico"><i class="fas fa-file-medical"></i> Seguro Médico</label>
                            <input type="text" id="seguro_medico" name="seguro_medico">
                        </div>
                        <div class="form-group">
                            <label for="numero_seguro"><i class="fas fa-hashtag"></i> Número de Seguro</label>
                            <input type="text" id="numero_seguro" name="numero_seguro">
                        </div>
                    </div>
                </div>

                <button type="submit" class="submit-button">
                    <i class="fas fa-save"></i> Guardar Paciente
                </button>
            </form>
        </div>
    </main>

    <script>
        document.getElementById('formulario-agregar-paciente').addEventListener('submit', function(event) {
            event.preventDefault(); 
            enviarFormulario();
        });

        function enviarFormulario() {
            const formulario = document.getElementById('formulario-agregar-paciente');
            const feedbackContainer = document.getElementById('feedback-container');
            const formData = new FormData(formulario);
            const submitButton = formulario.querySelector('.submit-button');

            submitButton.disabled = true;
            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Guardando...';
            feedbackContainer.innerHTML = '';

            fetch('../../../controllers/admin/agregar_paciente_procesar.php', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    feedbackContainer.innerHTML = `<div class="success-box">${data.message}</div>`;
                    formulario.reset();
                    setTimeout(() => {
                        window.location.href = 'admin_pacientes.html';
                    }, 2500);
                } else {
                    feedbackContainer.innerHTML = `<div class="error-box"><b>Error al guardar:</b><br>${data.message}</div>`;
                }
            })
            .catch(error => {
                console.error('Error en fetch:', error);
                feedbackContainer.innerHTML = `<div class="error-box">Error de conexión. Revisa la consola (F12) para más detalles.</div>`;
            })
            .finally(() => {
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-save"></i> Guardar Paciente';
            });
        }
    </script>
</body>
</html> <?php
// --- Manejador de Errores Avanzado para Depuración ---
// Este bloque es crucial para atrapar errores fatales (ej. archivo no encontrado) y devolverlos como JSON.
error_reporting(E_ALL);
ini_set('display_errors', 0);
header('Content-Type: application/json');

register_shutdown_function(function() {
    $error = error_get_last();
    if ($error !== null && in_array($error['type'], [E_ERROR, E_PARSE, E_CORE_ERROR, E_COMPILE_ERROR, E_USER_ERROR])) {
        if (!headers_sent()) {
            http_response_code(500);
        }
        echo json_encode([
            'success' => false,
            'message' => "Error fatal en el script del servidor.",
            'debug_error' => [
                'type'    => $error['type'],
                'message' => $error['message'],
                'file'    => $error['file'],
                'line'    => $error['line']
            ]
        ]);
    }
});
// --- Fin del Manejador de Errores ---

session_start();
require_once __DIR__ . '/../../models/clases/pacientes.php';

$response = ['success' => false, 'message' => 'Error: Solicitud no válida.'];

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $datos_paciente = [
        'documento_identificacion' => filter_input(INPUT_POST, 'documento_identificacion', FILTER_SANITIZE_NUMBER_INT),
        'nombre'                   => filter_input(INPUT_POST, 'nombre', FILTER_SANITIZE_STRING),
        'apellido'                 => filter_input(INPUT_POST, 'apellido', FILTER_SANITIZE_STRING),
        'fecha_nacimiento'         => $_POST['fecha_nacimiento'] ?? null,
        'genero'                   => $_POST['genero'] ?? null,
        'contacto_emergencia'      => filter_input(INPUT_POST, 'contacto_emergencia', FILTER_SANITIZE_STRING),
        'estado_civil'             => $_POST['estado_civil'] ?? null,
        'tipo_sangre'              => $_POST['tipo_sangre'] ?? null,
        'seguro_medico'            => filter_input(INPUT_POST, 'seguro_medico', FILTER_SANITIZE_STRING),
        'numero_seguro'            => filter_input(INPUT_POST, 'numero_seguro', FILTER_SANITIZE_STRING),
        'id_usuario_familiar'      => filter_input(INPUT_POST, 'familiar_solicitante_id', FILTER_VALIDATE_INT) ?: null
    ];
    
    $errores = [];
    if (empty($datos_paciente['nombre'])) $errores[] = "El nombre es requerido.";
    if (empty($datos_paciente['apellido'])) $errores[] = "El apellido es requerido.";
    if (empty($datos_paciente['documento_identificacion'])) $errores[] = "El número de documento es requerido.";
    
    if (empty($errores)) {
        try {
            $paciente = new Paciente();
            $resultado = $paciente->registrar($datos_paciente);

            if ($resultado && isset($resultado['id_paciente_creado'])) {
                $response['success'] = true;
                $response['message'] = "¡Paciente '{$datos_paciente['nombre']}' agregado con éxito!";
            } else {
                $response['message'] = "El registro fue procesado pero no se recibió confirmación de la base de datos.";
            }

        } catch (Exception $e) {
            $response['message'] = $e->getMessage();
            $response['debug_error'] = [ 'file' => $e->getFile(), 'line' => $e->getLine() ];
        }
    } else {
        $response['message'] = implode("<br>", $errores);
    }
}

echo json_encode($response);
?>
<?php
session_start();
require_once(__DIR__ . '/../models/clases/paciente.php');
require_once(__DIR__ . '/../models/data_base/database.php');


if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    $_SESSION['error'] = 'Acceso no permitido por este método.';
    header('Location: /ruta_a_tu_dashboard.php'); 
    exit();
}


if (!isset($_POST['accion'])) {
    $_SESSION['error'] = 'Acción no especificada.';
    header('Location: ../../views/pacientes/listado.php'); 
    exit();
}


$database = new Database();
$conn = $database->conectar(); 
$paciente_model = new Paciente($conn);

$accion = $_POST['accion'];


switch ($accion) {

    case 'registrar':
        
        $datos = [
            'documento_identificacion' => $_POST['documento_identificacion'] ?? null,
            'nombre'                   => $_POST['nombre'] ?? null,
            'apellido'                 => $_POST['apellido'] ?? null,
            'fecha_nacimiento'         => $_POST['fecha_nacimiento'] ?? null,
            'genero'                   => $_POST['genero'] ?? null,
            'contacto_emergencia'      => $_POST['contacto_emergencia'] ?? null,
            'estado_civil'             => $_POST['estado_civil'] ?? null,
            'tipo_sangre'              => $_POST['tipo_sangre'] ?? null,
            'seguro_medico'            => empty($_POST['seguro_medico']) ? null : $_POST['seguro_medico'],
            'numero_seguro'            => empty($_POST['numero_seguro']) ? null : $_POST['numero_seguro'],
            'id_usuario_familiar'      => empty($_POST['id_usuario_familiar']) ? null : $_POST['id_usuario_familiar'],
        ];

        $resultado = $paciente_model->registrar($datos);

        if ($resultado instanceof Exception) {

            $_SESSION['error'] = 'Error al registrar el paciente: ' . $resultado->getMessage();
            header('Location: ../../views/pacientes/formulario_registro.php'); 
        } else {

            $_SESSION['mensaje'] = 'Paciente registrado con éxito. ID: ' . $resultado['id_paciente_creado'];
            header('Location: ../../views/pacientes/listado.php'); 
        }
        break;


    case 'actualizar':
        $datos = [
            'id_paciente'              => $_POST['id_paciente'] ?? null,
            'documento_identificacion' => $_POST['documento_identificacion'] ?? null,
            'nombre'                   => $_POST['nombre'] ?? null,
            'apellido'                 => $_POST['apellido'] ?? null,
            'fecha_nacimiento'         => $_POST['fecha_nacimiento'] ?? null,
            'genero'                   => $_POST['genero'] ?? null,
            'contacto_emergencia'      => $_POST['contacto_emergencia'] ?? null,
            'estado_civil'             => $_POST['estado_civil'] ?? null,
            'tipo_sangre'              => $_POST['tipo_sangre'] ?? null,
            'seguro_medico'            => empty($_POST['seguro_medico']) ? null : $_POST['seguro_medico'],
            'numero_seguro'            => empty($_POST['numero_seguro']) ? null : $_POST['numero_seguro'],
            'id_usuario_familiar'      => empty($_POST['id_usuario_familiar']) ? null : $_POST['id_usuario_familiar'],
            'estado'                   => $_POST['estado'] ?? 'Activo',
        ];


        if (empty($datos['id_paciente'])) {
            $_SESSION['error'] = 'ID del paciente no especificado para la actualización.';
            header('Location: ../../views/pacientes/listado.php');
            break;
        }

        $resultado = $paciente_model->actualizar($datos);

        if ($resultado instanceof Exception) {
            $_SESSION['error'] = 'Error al actualizar el paciente: ' . $resultado->getMessage();
            header('Location: ../../views/pacientes/formulario_edicion.php?id=' . $datos['id_paciente']);
        } else {
            $_SESSION['mensaje'] = 'Paciente actualizado con éxito.';
            header('Location: ../../views/pacientes/listado.php');
        }
        break;
        

    case 'desactivar':
        $id_paciente = $_POST['id_paciente'] ?? null;

        if (empty($id_paciente)) {
            $_SESSION['error'] = 'No se especificó el ID del paciente a desactivar.';
        } else {
            $resultado = $paciente_model->desactivar($id_paciente);
            if ($resultado instanceof Exception) {
                 $_SESSION['error'] = 'Error al desactivar el paciente: ' . $resultado->getMessage();
            } else {
                $_SESSION['mensaje'] = 'Paciente desactivado correctamente.';
            }
        }
        header('Location: ../../views/pacientes/listado.php');
        break;

    default:

        $_SESSION['error'] = 'Acción desconocida.';
        header('Location: ../../views/pacientes/listado.php');
        break;
}


exit();
?>
<?php
session_start();
require 'database.php';
header('Content-Type: application/json');

$response = ['success' => false, 'message' => 'Error desconocido.'];

// --- Constantes de Roles (Asegúrate que coincidan con tu BD) ---
define('ADMIN_ROLE_ID', 3);
define('FAMILIAR_ROLE_ID', 1);
define('PACIENTE_ROLE_ID', 4); // Asumiendo que Paciente es el rol 4

// --- Verificación de Sesión y Rol de Admin ---
if (!isset($_SESSION['user_id']) || !isset($_SESSION['user_rol_id']) || $_SESSION['user_rol_id'] != ADMIN_ROLE_ID) {
    $response['message'] = 'Acceso no autorizado.';
    echo json_encode($response);
    exit();
}

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // --- Recolección de datos del POST ---
    $nombres = isset($_POST['nombres']) ? htmlspecialchars(trim($_POST['nombres'])) : '';
    $apellidos = isset($_POST['apellidos']) ? htmlspecialchars(trim($_POST['apellidos'])) : '';
    $correo = isset($_POST['correo']) ? filter_var(trim($_POST['correo']), FILTER_SANITIZE_EMAIL) : '';
    $tipo_documento = isset($_POST['tipo_documento']) ? htmlspecialchars(trim($_POST['tipo_documento'])) : '';
    $documento = isset($_POST['documento']) ? htmlspecialchars(trim($_POST['documento'])) : '';
    $password = isset($_POST['password']) ? $_POST['password'] : '';
    $confirm_password = isset($_POST['confirm_password']) ? $_POST['confirm_password'] : '';
    $solicitud_origen_id = isset($_POST['solicitud_origen_id']) && !empty($_POST['solicitud_origen_id']) ? filter_var($_POST['solicitud_origen_id'], FILTER_VALIDATE_INT) : null;
    $familiar_solicitante_id = isset($_POST['familiar_solicitante_id']) && !empty($_POST['familiar_solicitante_id']) ? filter_var($_POST['familiar_solicitante_id'], FILTER_VALIDATE_INT) : null;

    // --- Validaciones ---
    $errores = [];
    if (empty($nombres)) $errores[] = "El nombre es requerido.";
    if (empty($apellidos)) $errores[] = "El apellido es requerido.";
    if (!filter_var($correo, FILTER_VALIDATE_EMAIL)) $errores[] = "El correo electrónico no es válido.";
    if (empty($tipo_documento)) $errores[] = "El tipo de documento es requerido.";
    if (empty($documento)) $errores[] = "El documento es requerido.";
    if (empty($password)) {
        $errores[] = "La contraseña es requerida.";
    } elseif (strlen($password) < 6) {
        $errores[] = "La contraseña debe tener al menos 6 caracteres.";
    }
    if ($password !== $confirm_password) $errores[] = "Las contraseñas no coinciden.";
    if ($familiar_solicitante_id !== null && $familiar_solicitante_id <= 0) $errores[] = "El ID del familiar solicitante no es válido.";
    if ($solicitud_origen_id !== null && $solicitud_origen_id <= 0) $errores[] = "El ID de la solicitud de origen no es válido.";

    // --- Lógica Principal ---
    if (empty($errores)) {
        $conn->begin_transaction();
        try {
            // 1. Verificar si el DOCUMENTO ya existe
            $stmt_check_doc = $conn->prepare("SELECT id FROM usuarios WHERE documento = ?");
            if($stmt_check_doc === false) throw new Exception("Error preparando verificación doc: ".$conn->error);
            $stmt_check_doc->bind_param("s", $documento);
            if(!$stmt_check_doc->execute()) throw new Exception("Error ejecutando verificación doc: ".$stmt_check_doc->error);
            $result_check_doc = $stmt_check_doc->get_result();
            if ($result_check_doc->num_rows > 0) {
                $stmt_check_doc->close();
                throw new Exception("El número de documento ya está registrado.");
            }
            $stmt_check_doc->close();

            // 2. Verificar si el CORREO ya existe y con qué rol
            $stmt_check_correo = $conn->prepare("SELECT id, rol_id FROM usuarios WHERE correo = ?");
             if($stmt_check_correo === false) throw new Exception("Error preparando verificación correo: ".$conn->error);
            $stmt_check_correo->bind_param("s", $correo);
             if(!$stmt_check_correo->execute()) throw new Exception("Error ejecutando verificación correo: ".$stmt_check_correo->error);
            $result_check_correo = $stmt_check_correo->get_result();

            if ($result_check_correo->num_rows > 0) {
                $usuario_existente = $result_check_correo->fetch_assoc();
                // ** LÓGICA MODIFICADA: Permitir si el correo existe pero es de un Familiar **
                // Si el correo existe Y NO es de un familiar, entonces es un error (no puede ser admin, cuidador, u otro paciente con mismo correo)
                if ($usuario_existente['rol_id'] != FAMILIAR_ROLE_ID) {
                     $stmt_check_correo->close();
                     // ** ADVERTENCIA: Permitir que un correo de Familiar se use para un Paciente puede causar problemas si el sistema usa el correo para login único o recuperación de contraseña para todos los roles. **
                     // Si decides no permitirlo, descomenta la siguiente línea:
                      throw new Exception("Este correo electrónico ya está registrado con otro rol.");
                }
                // Si llega aquí, el correo existe pero es de un Familiar, se permite continuar.
            }
            $stmt_check_correo->close();


            // 3. Hashear contraseña
            $hashed_password = password_hash($password, PASSWORD_DEFAULT);

            // 4. Insertar el nuevo usuario PACIENTE
             // Asegúrate que PACIENTE_ROLE_ID (ej. 4) esté definido correctamente arriba
            $sql_insert = "INSERT INTO usuarios (nombres, apellidos, correo, tipo_documento, documento, rol_id, password) VALUES (?, ?, ?, ?, ?, ?, ?)";
            $stmt_insert = $conn->prepare($sql_insert);
            if($stmt_insert === false) throw new Exception("Error preparando inserción paciente: ".$conn->error);
            $stmt_insert->bind_param("sssssis", $nombres, $apellidos, $correo, $tipo_documento, $documento, PACIENTE_ROLE_ID, $hashed_password);

            if (!$stmt_insert->execute()) {
                // Capturar error específico de MySQL (ej. duplicate key si algo falló en verificación)
                throw new Exception("Error al agregar el paciente: (" . $stmt_insert->errno . ") " . $stmt_insert->error);
            }
            $nuevo_paciente_id = $conn->insert_id; // Obtener el ID del paciente recién creado
            $stmt_insert->close();

            // 5. Crear la relación Familiar-Paciente (si aplica)
            if ($familiar_solicitante_id !== null && $nuevo_paciente_id > 0) {
                 // Verificar que el familiar_id realmente es un familiar (redundante si se valida en origen, pero seguro)
                $stmt_check_familiar_rol = $conn->prepare("SELECT id FROM usuarios WHERE id = ? AND rol_id = ?");
                 if($stmt_check_familiar_rol === false) throw new Exception("Error prep. verif. rol familiar: ".$conn->error);
                 $stmt_check_familiar_rol->bind_param("ii", $familiar_solicitante_id, FAMILIAR_ROLE_ID);
                 if(!$stmt_check_familiar_rol->execute()) throw new Exception("Error ejec. verif. rol familiar: ".$stmt_check_familiar_rol->error);
                 $result_check_familiar_rol = $stmt_check_familiar_rol->get_result();

                if ($result_check_familiar_rol->num_rows == 1) {
                     // Insertar la relación
                    $stmt_relacion = $conn->prepare("INSERT INTO familiares_pacientes (familiar_id, paciente_id) VALUES (?, ?)");
                     if($stmt_relacion === false) throw new Exception("Error preparando relación: ".$conn->error);
                    $stmt_relacion->bind_param("ii", $familiar_solicitante_id, $nuevo_paciente_id);
                    if(!$stmt_relacion->execute()) throw new Exception("Error al crear la relación familiar-paciente: ".$stmt_relacion->error);
                    $stmt_relacion->close();
                } else {
                     // Si el ID del familiar no corresponde a un familiar, registrar pero no detener (podría ser opcional)
                     error_log("Intento de relacionar paciente $nuevo_paciente_id con usuario $familiar_solicitante_id que NO es Familiar.");
                }
                 $stmt_check_familiar_rol->close();
            }

            // 6. Actualizar estado de la Solicitud de origen (si aplica)
            if ($solicitud_origen_id !== null && $nuevo_paciente_id > 0) {
                 // Marcarla como Aprobada y asociar el ID del paciente creado
                 // Se usa 'Aprobada' en lugar de 'Procesada' o 'Completada' porque el admin acaba de aprobar el ingreso al CREAR al paciente.
                $stmt_update_sol = $conn->prepare("UPDATE solicitudes SET estado = 'Aprobada', paciente_id_relacionado = ? WHERE id = ? AND tipo_solicitud = 'Ingreso' AND estado = 'Pendiente'"); // Solo actualiza si estaba pendiente
                 if($stmt_update_sol === false) throw new Exception("Error preparando actualización solicitud: ".$conn->error);
                $stmt_update_sol->bind_param("ii", $nuevo_paciente_id, $solicitud_origen_id);
                 if(!$stmt_update_sol->execute()) {
                     // No lanzar excepción aquí, solo loguear, porque el paciente ya se creó.
                     error_log("Error al actualizar solicitud $solicitud_origen_id tras agregar paciente $nuevo_paciente_id: ".$stmt_update_sol->error);
                 } else {
                      // Log si se actualizó
                      if ($stmt_update_sol->affected_rows > 0) {
                           error_log("Solicitud de ingreso #$solicitud_origen_id actualizada a Aprobada y asociada a paciente #$nuevo_paciente_id.");
                      }
                 }
                $stmt_update_sol->close();
            }

            // Si todo fue bien, confirmar transacción
            $conn->commit();
            $response['success'] = true;
            $response['message'] = "Paciente '$nombres $apellidos' agregado correctamente.";
            if ($familiar_solicitante_id) $response['message'] .= " Asociado al familiar.";
            if ($solicitud_origen_id && isset($stmt_update_sol) && $stmt_update_sol->affected_rows > 0) $response['message'] .= " Solicitud #$solicitud_origen_id actualizada.";


        } catch (Exception $e) {
            $conn->rollback(); // Revertir cambios si algo falló
            $response['message'] = $e->getMessage();
            error_log("Error en agregar_paciente_procesar: ".$e->getMessage());
            // Cerrar statements si están abiertos en caso de error temprano
            if(isset($stmt_check_doc) && $stmt_check_doc) $stmt_check_doc->close();
            if(isset($stmt_check_correo) && $stmt_check_correo) $stmt_check_correo->close();
            if(isset($stmt_insert) && $stmt_insert) $stmt_insert->close();
            if(isset($stmt_check_familiar_rol) && $stmt_check_familiar_rol) $stmt_check_familiar_rol->close();
            if(isset($stmt_relacion) && $stmt_relacion) $stmt_relacion->close();
            if(isset($stmt_update_sol) && $stmt_update_sol) $stmt_update_sol->close();
        }

    } else {
        // Si hubo errores de validación inicial
        $response['message'] = $errores; // Devolver array de errores
    }
} else {
    $response['message'] = "Método de solicitud no válido.";
}

// Cerrar conexión y enviar respuesta JSON
if (isset($conn) && $conn) $conn->close();
echo json_encode($response);
?>
USE gericare_connect;

DROP PROCEDURE IF EXISTS registrar_paciente;
DROP PROCEDURE IF EXISTS actualizar_paciente;
DROP PROCEDURE IF EXISTS consultar_paciente;
DROP PROCEDURE IF EXISTS desactivar_paciente;

DELIMITER //



CREATE PROCEDURE registrar_paciente(

    IN p_documento_identificacion INT,
    IN p_nombre VARCHAR(50),
    IN p_apellido VARCHAR(50),
    IN p_fecha_nacimiento DATE,
    IN p_genero ENUM('Masculino','Femenino'),
    IN p_contacto_emergencia VARCHAR(20),
    IN p_estado_civil VARCHAR(30),
    IN p_tipo_sangre ENUM('A+','A-','B+','B-','AB+','AB-','O+','O-'),
    IN p_seguro_medico VARCHAR(100),
    IN p_numero_seguro VARCHAR(50),
    IN p_id_usuario_familiar INT
)
BEGIN
    INSERT INTO tb_paciente (
        documento_identificacion,
        nombre,
        apellido,
        fecha_nacimiento,
        genero,
        contacto_emergencia,
        estado_civil,
        tipo_sangre,
        seguro_medico,
        numero_seguro,
        id_usuario_familiar,
        estado 
    ) VALUES (
        p_documento_identificacion,
        p_nombre,
        p_apellido,
        p_fecha_nacimiento,
        p_genero,
        p_contacto_emergencia,
        p_estado_civil,
        p_tipo_sangre,
        p_seguro_medico,
        p_numero_seguro,
        p_id_usuario_familiar,
        'Activo'
    );

    SELECT LAST_INSERT_ID() AS 'id_paciente_creado';
END //

CREATE PROCEDURE actualizar_paciente(

    IN p_id_paciente INT,
    IN p_documento_identificacion INT,
    IN p_nombre VARCHAR(50),
    IN p_apellido VARCHAR(50),
    IN p_fecha_nacimiento DATE,
    IN p_genero ENUM('Masculino','Femenino'),
    IN p_contacto_emergencia VARCHAR(20),
    IN p_estado_civil VARCHAR(30),
    IN p_tipo_sangre ENUM('A+','A-','B+','B-','AB+','AB-','O+','O-'),
    IN p_seguro_medico VARCHAR(100),
    IN p_numero_seguro VARCHAR(50),
    IN p_id_usuario_familiar INT,
    IN p_estado ENUM('Activo', 'Inactivo')
)
BEGIN
    UPDATE tb_paciente SET
        documento_identificacion = p_documento_identificacion,
        nombre = p_nombre,
        apellido = p_apellido,
        fecha_nacimiento = p_fecha_nacimiento,
        genero = p_genero,
        contacto_emergencia = p_contacto_emergencia,
        estado_civil = p_estado_civil,
        tipo_sangre = p_tipo_sangre,
        seguro_medico = p_seguro_medico,
        numero_seguro = p_numero_seguro,
        id_usuario_familiar = p_id_usuario_familiar,
        estado = p_estado
    WHERE id_paciente = p_id_paciente;
END //

CREATE PROCEDURE consultar_paciente(
  
    IN p_id_paciente INT,
    IN p_documento_identificacion INT,
    IN p_nombre VARCHAR(50),
    IN p_apellido VARCHAR(50)
)
BEGIN
   
    SELECT
        p.*, -
        u.nombre AS nombre_familiar,
        u.apellido AS apellido_familiar,
        u.correo_electronico AS correo_familiar
    FROM tb_paciente p
    LEFT JOIN tb_usuario u ON p.id_usuario_familiar = u.id_usuario 
    WHERE
        p.estado = 'Activo' 
        AND (p_id_paciente IS NULL OR p.id_paciente = p_id_paciente)
        AND (p_documento_identificacion IS NULL OR p.documento_identificacion = p_documento_identificacion)
        AND (p_nombre IS NULL OR p.nombre LIKE CONCAT('%', p_nombre, '%'))
        AND (p_apellido IS NULL OR p.apellido LIKE CONCAT('%', p_apellido, '%'));
END //

CREATE PROCEDURE desactivar_paciente(
    IN p_id_paciente INT
)
BEGIN
    
    UPDATE tb_paciente SET estado = 'Inactivo' WHERE id_paciente = p_id_paciente;
  
END //

DELIMITER ;<?php

/**
 * Clase para gestionar las operaciones de los pacientes en la base de datos.
 */
class Paciente {
    /**
     * @var PDO La conexión a la base de datos.
     */
    protected $conn;

    /**
     * Constructor de la clase. Inicia y verifica la conexión a la base de datos.
     */
    public function __construct() {
        // Suprime la salida de error por defecto para manejarla nosotros.
        @include_once(__DIR__ . '/../../data_base/database.php');
        
        // Verificación CRÍTICA: Asegura que la conexión ($conn) se creó correctamente.
        if (!isset($conn) || !$conn instanceof PDO) {
            // Si $conn no existe o no es un objeto PDO, lanza una excepción clara.
            throw new Exception("Falló la conexión a la base de datos. Verifique las credenciales y la ruta en 'database.php'.");
        }
        
        // Asigna la conexión a la propiedad de la clase.
        $this->conn = $conn;
    }
    
    /**
     * Registra un nuevo paciente llamando al procedimiento almacenado.
     *
     * @param array $datos Los datos del paciente a registrar.
     * @return mixed El resultado del procedimiento almacenado.
     * @throws Exception Si ocurre un error.
     */
    public function registrar($datos) {
        try {
            $query = $this->conn->prepare("CALL registrar_paciente(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            
            $query->bindParam(1,  $datos['documento_identificacion']);
            $query->bindParam(2,  $datos['nombre']);
            $query->bindParam(3,  $datos['apellido']);
            $query->bindParam(4,  $datos['fecha_nacimiento']);
            $query->bindParam(5,  $datos['genero']);
            $query->bindParam(6,  $datos['contacto_emergencia']);
            $query->bindParam(7,  $datos['estado_civil']);
            $query->bindParam(8,  $datos['tipo_sangre']);
            $query->bindParam(9,  $datos['seguro_medico']);
            $query->bindParam(10, $datos['numero_seguro']);
            $query->bindParam(11, $datos['id_usuario_familiar']);

            $query->execute();

            return $query->fetch(PDO::FETCH_ASSOC);

        } catch (Exception $e) {
            // Relanza la excepción para un manejo de errores centralizado.
            throw $e;
        }
    }

    // Aquí puedes agregar tus otros métodos: actualizar, consultar, desactivar, etc.
}
?>
OYE NECESITO LO SIGUIENTE, NECESTO QUE LOS PROCESOS CRUD (CREATE, RELOAD, UPDATE, DELATE) TODOS FUNCIONEN CORRECTAMENTE CUALQUIER COSA QUE NECESITES DIME TIPO NECESTO QUE CUANDO SE ENTRE COMO ADMINISTRADOR ESTE PUEDA REGISTRAR PACIENTES COMO SI NADA ENTONCES BASICAMENTE ES LO SIGUIENTE DAME LOS CODIGOS PHP DE EL MODELO, EL CONTROLADOR Y EL SQL CON ABSULUTAMENTE TODO LO QUE NECESITO